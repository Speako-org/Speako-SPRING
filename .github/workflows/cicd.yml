name: Java CI/CD Pipeline with Gradle

on:
  push:
    branches: [ "dev" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:

      #------------------- CI --------------------

      - uses: actions/checkout@v3

      # JDK 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 빌드 시간 단축을 위한 Gradle 캐싱
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # yml 파일 생성
      - name: Make application.yml
        run: |
          mkdir -p ./src/main/resources
          printf "%s\n" "${{ secrets.APPLICATION_YML }}" > ./src/main/resources/application.yml
        shell: bash

      # Spring Boot 어플리케이션 빌드
      - name: Spring Boot Build
        run: ./gradlew clean build -x test

      # DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Docker 이미지 빌드/푸시
      - name: Build/Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }} .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }}

      #------------------- CD --------------------

      # EC2 접속 후 서버 배포
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        env:
          COMPOSE: "/home/ubuntu/docker-compose.yml"
        with:
          username: ubuntu
          host: ${{ secrets.EC2_HOST }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: COMPOSE
          script_stop: true
          script: |
            printf "%s\n" "${{ secrets.ENV_VARS }}" | sudo tee /home/ubuntu/.env > /dev/null
            sudo docker compose -f $COMPOSE --env-file /home/ubuntu/.env down
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }}
            sudo docker compose -f $COMPOSE --env-file /home/ubuntu/.env up -d
            sudo docker image prune -f
